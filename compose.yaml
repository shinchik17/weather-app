name: weather

services:

  tomcat_app:
    image: shinchik17/weather-app
    container_name: tomcat_app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
        restart: true
    ports:
      - "80:8080"
      - "9001:9001"
    environment:
      - BCRYPT_SALT=${BCRYPT_SALT}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - DS_PASSWORD=${DS_PASSWORD}
      - DS_URL=${DS_URL}
    networks:
      - default
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  db:
    image: postgres:15
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DS_PASSWORD}
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - default
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      retries: 5
      start_period: 30s
      timeout: 10s

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 60 --label-enable

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - default
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prom_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--web.config.file=/etc/prometheus/web.yaml'

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - default
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning/datasources


networks:
  default:
    driver: bridge


volumes:
  db-data:
  prom_data: